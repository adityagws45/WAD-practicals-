 Step-by-Step Guide to Run Docker App on Ubuntu
📦 Step 1: Install Docker on Ubuntu
Open the terminal and run:

bash
Copy
Edit
sudo apt update
sudo apt install docker.io -y
Enable and start Docker:

bash
Copy
Edit
sudo systemctl enable docker
sudo systemctl start docker
Check Docker version:

bash
Copy
Edit
docker --version
You should see something like:

nginx
Copy
Edit
Docker version 24.x.x, build xxxxx
🗂️ Step 2: Prepare Your Project Files
Make a directory for your app:

bash
Copy
Edit
mkdir my-docker-app
cd my-docker-app






 Step 3: Create the Required Files
Inside the my-docker-app directory, you need to create three files:

app.js – A simple Node.js script

package.json – Contains metadata and dependencies

Dockerfile – Instructions for building the Docker image

You can use nano, vim, or any editor. Let's go step by step.

📄 3.1 Create app.js
This file will simply print a message.

bash
Copy
Edit
nano app.js
Paste this content inside:

javascript
Copy
Edit
console.log("Hello from Docker!");
Press CTRL + O → Enter to save, then CTRL + X to exit.

📄 3.2 Create package.json
bash
Copy
Edit
nano package.json
Paste the following:

json
Copy
Edit
{
  "name": "docker-app",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  }
}
Save and exit (CTRL + O, Enter, then CTRL + X).

📄 3.3 Create Dockerfile (no extension)
bash
Copy
Edit
nano Dockerfile
Paste this:

Dockerfile
Copy
Edit
# Use Node.js base image
FROM node:18

# Set working directory
WORKDIR /app

# Copy files
COPY . .

# Install dependencies (none in this case, but good practice)
RUN npm install

# Command to run the app
CMD ["npm", "start"]
Save and exit.

✅ Step 4: Build the Docker Image
Before this step, make sure Docker is installed and running:

bash
Copy
Edit
docker --version
If Docker is working, build your image:

bash
Copy
Edit
docker build -t my-node-app .
This will:

Download the Node.js base image

Copy your project into the image

Install dependencies (none in this case)

Tag the image as my-node-app

▶️ Step 5: Run the Docker Container
Now run your container:

bash
Copy
Edit
docker run my-node-app
✅ Output:

csharp
Copy
Edit
Hello from Docker!
🛠️ Step 6: View and Clean Up Containers
To list all containers (even stopped ones):

bash
Copy
Edit
docker ps -a
To remove the container (replace <container_id> with actual ID):

bash
Copy
Edit
docker rm <container_id>
////////////////////////////////////////////////////////////////////////////////////////








adityagawas@adityagawas-VirtualBox:~$ docker --version
Docker version 26.1.3, build 26.1.3-0ubuntu1.1
adityagawas@adityagawas-VirtualBox:~$ sudo systemctl status docker
● docker.service - Docker Application Container Engine
     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; preset: e>
     Active: active (running) since Tue 2025-05-06 22:55:58 IST; 11min ago
 Invocation: 690449a93f45480c8d81e5f7347486e8
TriggeredBy: ● docker.socket
       Docs: https://docs.docker.com
   Main PID: 1409 (dockerd)
      Tasks: 10
     Memory: 105.7M (peak: 108.7M)
        CPU: 3.918s
     CGroup: /system.slice/docker.service
             └─1409 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/cont>

May 06 22:55:56 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:56>
May 06 22:55:57 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:57>
May 06 22:55:57 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:57>
May 06 22:55:57 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:57>
May 06 22:55:57 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:57>
May 06 22:55:58 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:58>
May 06 22:55:58 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:58>
May 06 22:55:58 adityagawas-VirtualBox systemd[1]: Started docker.service - Doc>
May 06 22:55:58 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:55:58>
May 06 22:57:56 adityagawas-VirtualBox dockerd[1409]: time="2025-05-06T22:57:56>

adityagawas@adityagawas-VirtualBox:~$ ^[[200~sudo systemctl start docker
sudo: command not found
adityagawas@adityagawas-VirtualBox:~$ sudo systemctl start docker 
adityagawas@adityagawas-VirtualBox:~$ sudo systemctl enable docker 
adityagawas@adityagawas-VirtualBox:~$ sudo docker run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

adityagawas@adityagawas-VirtualBox:~$ sudo docker ps -a
CONTAINER ID   IMAGE         COMMAND    CREATED          STATUS                      PORTS     NAMES
12f039a2cb72   hello-world   "/hello"   28 seconds ago   Exited (0) 27 seconds ago             relaxed_tesla
adityagawas@adityagawas-VirtualBox:~$ sudo docker rm 12f039a2cb72
12f039a2cb72
adityagawas@adityagawas-VirtualBox:~$ sudo docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
adityagawas@adityagawas-VirtualBox:~$ sudo docker container prune
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Total reclaimed space: 0B
adityagawas@adityagawas-VirtualBox:~$ sudo systemctl stop docker
Stopping 'docker.service', but its triggering units are still active:
docker.socket
adityagawas@adityagawas-VirtualBox:~$ 

///////////////////////////////////////////////////////////////////////////////////////////////




🐳 Perform the Docker Practical
🔹 Step 1: Install Docker

Open your terminal and run:

sudo apt update
sudo apt install docker.io -y

👉 This installs Docker from Ubuntu’s official repository.
🔹 Step 2: Check Docker Version

docker --version

✅ You should see output like: Docker version 24.x.x, build abcdefg
🔹 Step 3: Check Docker Service Status

sudo systemctl status docker

📌 If it's not active, you'll start it in the next step.
🔹 Step 4: Start Docker Service

sudo systemctl start docker

To make Docker start automatically on boot, also run:

sudo systemctl enable docker

🔹 Step 5: Run a Test Container

sudo docker run hello-world

✅ You should see a message starting with “Hello from Docker!”
🔹 Step 6: List All Containers (including exited)

sudo docker ps -a

This shows all containers. You'll see hello-world listed with "Exited".
🔹 Step 7: Remove a Container

First, copy the Container ID or Name from the output of docker ps -a. For example:

sudo docker rm f67b9eef5165

Or by name:

sudo docker rm elastic_bassi

📌 Tip: To remove all exited containers at once:

sudo docker container prune

It will ask for confirmation (y/n).
🔹 Step 8: Stop Docker Service

sudo systemctl stop docker

📌 Optional: Saves system resources when you're done.

///////////////////////////////////////////////////////////////////

---
 
# 🐳 Practical: Create Docker Container Environment

This guide walks you through setting up Docker, running your first container, and managing containers on a Linux system.

---

## 🛠️ Step-by-Step Commands

### 1. Install Docker

```bash
sudo apt install docker.io
```

Installs Docker Engine from Ubuntu’s package repository.

---

### 2. Check Docker Version

```bash
docker --version
```

Displays the installed Docker version to confirm the installation.

---

### 3. Check Docker Service Status

```bash
sudo systemctl status docker
```

Shows if the Docker service is active, inactive, or failed.

---

### 4. Start Docker Service

```bash
sudo systemctl start docker
```

Starts the Docker service if it’s not already running.

---

### 5. Run a Test Container

```bash
sudo docker run hello-world
```

Downloads and runs a test container to verify Docker is working.

---

### 6. List All Containers

```bash
sudo docker ps -a
```

Lists all containers (running + stopped) on your system.

---

### 7. Remove a Container

```bash
sudo docker rm <container_id>
```

Deletes a container. Replace `<container_id>` with the actual ID from the previous command.

---

### 8. Stop Docker Service

```bash
sudo systemctl stop docker
```

Stops the Docker service to save system resources.

---

## ✅ DONE











